using "file" from "Core"
using "util/range" from "Core"

function parseFile(name: str): Array
    decl file: any name "rb" fopen => file

    file 0 fseekend
    decl size: int file ftell => size
    file 0 fseekstart

    decl buf: str
    file size fread => buf
    buf "\n" strsplit return
end

function main(): none
    decl arr: Array
    "input.txt" parseFile => arr

    decl totalDuplicates: int 0 => totalDuplicates

    for i in 0 to arr.count do
        decl line: str i arr:get => line
        decl partners: Array
        line "," strsplit => partners

        decl p1: Array 0 partners:get "-" strsplit => p1
        decl p2: Array 1 partners:get "-" strsplit => p2

        decl p1r: Range 0 p1:get stringToLong 1 p1:get stringToLong Range:new => p1r
        decl p2r: Range 0 p2:get stringToLong 1 p2:get stringToLong Range:new => p2r

        # i longToString ": " concat p2r p1r:contains p1r p2r:contains || longToString concat puts

        p2r p1r:containsRange p1r p2r:containsRange || if
            totalDuplicates 1 + => totalDuplicates
        fi
    done
    "Total duplicates (Part 1): " totalDuplicates longToString concat puts

    decl totalOverlaps: int 0 => totalOverlaps

    for i in 0 to arr.count do
        decl line: str i arr:get => line
        decl partners: Array
        line "," strsplit => partners

        decl p1: Array 0 partners:get "-" strsplit => p1
        decl p2: Array 1 partners:get "-" strsplit => p2

        decl p1r: Range 0 p1:get stringToLong 1 p1:get stringToLong Range:new => p1r
        decl p2r: Range 0 p2:get stringToLong 1 p2:get stringToLong Range:new => p2r

        p2r p1r:overlaps p1r p2r:overlaps || if
            totalOverlaps 1 + => totalOverlaps
        fi
    done
    "Total overlaps (Part 2): " totalOverlaps longToString concat puts
end
